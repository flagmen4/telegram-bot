import os
import logging
from datetime import datetime, timedelta, time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, JobQueue
from workalendar.europe import Germany
import pytz
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
TOKEN = "7975152331:AAEAkrFkXCLkSQs-nBev7MBRggkFJwxXW98"
DEBT_FILE = "debt.txt"
cal = Germany()
tz = pytz.timezone('Europe/Berlin')

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ (–¥–Ω–∏ 0-4 = –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞)
LESSON_SCHEDULE: Dict[int, List[Dict]] = {
    0: [  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        {"start": time(8, 15), "end": time(9, 0), "name": "Mathe: Gruppenarbeit"},
        {"start": time(9, 15), "end": time(10, 0), "name": "Sport"},
        {"start": time(10, 5), "end": time(10, 50), "name": "Sport"},
        {"start": time(11, 10), "end": time(11, 55), "name": "English"}
    ],
    1: [  # –í—Ç–æ—Ä–Ω–∏–∫
        {"start": time(8, 15), "end": time(9, 0), "name": "Mathe: Wochenplan"},
        {"start": time(9, 15), "end": time(10, 0), "name": "Englisch"},
        {"start": time(10, 5), "end": time(10, 50), "name": "DaZ: Wochenplan"},
        {"start": time(11, 10), "end": time(11, 55), "name": "DaZ: Wochenplan"},
        {"start": time(12, 0), "end": time(12, 45), "name": "DaZ: Wochenplan"}
    ],
    2: [  # –°—Ä–µ–¥–∞
        {"start": time(8, 15), "end": time(9, 0), "name": "Mathe: Anton/Wochenplan"},
        {"start": time(9, 15), "end": time(10, 0), "name": "Werte"},
        {"start": time(10, 5), "end": time(10, 50), "name": "DaZ: Wochenplan"},
        {"start": time(11, 10), "end": time(11, 55), "name": "Englisch"},
        {"start": time(12, 0), "end": time(12, 45), "name": "DaZ: Lernzeit"}
    ],
    3: [  # –ß–µ—Ç–≤–µ—Ä–≥
        {"start": time(8, 15), "end": time(9, 0), "name": "DaZ: Wochenplan"},
        {"start": time(9, 15), "end": time(10, 0), "name": "GRO/Geschichte"},
        {"start": time(10, 5), "end": time(10, 50), "name": "Geo/Geschichte"},
        {"start": time(11, 10), "end": time(11, 55), "name": "Englisch"},
        {"start": time(12, 0), "end": time(12, 45), "name": "DaZ: Wochenplan"}
    ],
    4: [  # –ü—è—Ç–Ω–∏—Ü–∞
        {"start": time(8, 15), "end": time(9, 0), "name": "DaZ: Wochenplan"},
        {"start": time(9, 15), "end": time(10, 0), "name": "DaZ: Wochenplan"},
        {"start": time(10, 5), "end": time(10, 50), "name": "Mathe: Wochenplan"},
        {"start": time(11, 10), "end": time(11, 55), "name": "Werte"},
        {"start": time(12, 0), "end": time(12, 45), "name": "DaZ: Lernzeit / Feedback"}
    ]
}


def get_current_lessons(now: datetime) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    weekday = now.weekday()
    if weekday not in LESSON_SCHEDULE:
        return []

    current_time = now.time()
    return [lesson for lesson in LESSON_SCHEDULE[weekday] if lesson["start"] > current_time]


def format_lessons(lessons: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç"""
    return "\n".join(
        f"{lesson['start'].strftime('%H:%M')} - {lesson['end'].strftime('%H:%M')} ‚Üí {lesson['name']}"
        for lesson in lessons
    )


# –ö–æ–º–∞–Ω–¥–∞ /urok
async def urok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —É—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    –ï—Å–ª–∏ —É—Ä–æ–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –¥–Ω—è.
    """
    try:
        now = datetime.now(tz)
        lessons = get_current_lessons(now)

        if not lessons:
            # –ï—Å–ª–∏ —É—Ä–æ–∫–∏ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –¥–Ω—è
            next_date = now.date() + timedelta(days=1)
            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ —É—á–µ–±–Ω—ã–π (–≤—ã—Ö–æ–¥–Ω–æ–π), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å
            while next_date.weekday() not in LESSON_SCHEDULE:
                next_date += timedelta(days=1)
            lessons_next = LESSON_SCHEDULE[next_date.weekday()]
            response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {next_date.strftime('%d.%m.%Y')}:\n" + format_lessons(lessons_next)
        else:
            response = format_lessons(lessons)

        await update.message.reply_text(response)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —É—Ä–æ–∫–æ–≤
async def lesson_notification(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ä–æ–∫–∞—Ö —Ä–æ–≤–Ω–æ –≤ –º–æ–º–µ–Ω—Ç –∏—Ö –Ω–∞—á–∞–ª–∞.
    """
    now = datetime.now(tz)
    lessons = get_current_lessons(now)

    if not lessons:
        return

    next_lesson = lessons[0]
    lesson_start = datetime.combine(now.date(), next_lesson["start"]).astimezone(tz)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–≤–Ω–æ –≤ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞
    if now.hour == lesson_start.hour and now.minute == lesson_start.minute:
        response = format_lessons(lessons)
        await context.bot.send_message(
            chat_id=context.job.chat_id,
            text=response
        )


def load_debt() -> float:
    if os.path.exists(DEBT_FILE):
        with open(DEBT_FILE, "r") as f:
            return float(f.read().strip())
    return 335.0


def save_debt(amount: float):
    with open(DEBT_FILE, "w") as f:
        f.write(str(amount))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ–ª–≥–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
        "/tato - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ–º\n"
        "/urok - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤"
    )


async def tato(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        current_debt = load_debt()

        if not args:
            today = datetime.now(tz).strftime("%d.%m.%Y")
            await update.message.reply_text(f"üìÖ –ù–∞ {today} –¥–æ–ª–≥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {current_debt}‚Ç¨")
            return

        operation = args[0]

        if operation.startswith(("+", "-")):
            value = float(operation[1:])
            new_debt = current_debt + value if operation.startswith("+") else current_debt - value
            save_debt(new_debt)
            today = datetime.now(tz).strftime("%d.%m.%Y")
            await update.message.reply_text(
                f"‚úÖ –î–æ–ª–≥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {operation} ({today})\n"
                f"üìÖ –ù–æ–≤—ã–π –¥–æ–ª–≥: {new_debt}‚Ç¨"
            )

        elif operation == "stay":
            if len(args) < 2:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /tato stay <—Å—É–º–º–∞>")
                return
            new_debt = float(args[1])
            save_debt(new_debt)
            today = datetime.now(tz).strftime("%d.%m.%Y")
            await update.message.reply_text(
                f"‚úÖ –î–æ–ª–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_debt}‚Ç¨ ({today})"
            )
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /tato [+-]<—Å—É–º–º–∞> –∏–ª–∏ /tato stay <—Å—É–º–º–∞>")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def add_daily_debt():
    now = datetime.now(tz)
    if now.weekday() < 5 and not cal.is_holiday(now.date()):
        debt = load_debt() + 5
        save_debt(debt)
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ 5‚Ç¨ –∑–∞ {now.strftime('%d.%m.%Y')}. –ù–æ–≤—ã–π –¥–æ–ª–≥: {debt}‚Ç¨")


async def weekly_notification(context: ContextTypes.DEFAULT_TYPE):
    debt = load_debt()
    today = datetime.now(tz).strftime("%d.%m.%Y")
    await context.bot.send_message(
        chat_id=context.job.chat_id,
        text=f"üìÖ –ù–∞ {today} –¥–æ–ª–≥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {debt}‚Ç¨"
    )


def setup_jobs(job_queue: JobQueue, chat_id: int):
    job_queue.run_daily(
        lambda ctx: add_daily_debt(),
        time=time(hour=0, minute=1, tzinfo=tz),
        days=(0, 1, 2, 3, 4, 5, 6),
        name="daily_debt"
    )

    job_queue.run_repeating(
        weekly_notification,
        interval=604800,
        first=datetime.now(tz).replace(
            hour=6, minute=50, second=0, microsecond=0,
            tzinfo=tz
        ) + timedelta(days=(7 - datetime.now(tz).weekday()) % 7),
        chat_id=chat_id,
        name="weekly_notification"
    )

    job_queue.run_repeating(
        lesson_notification,
        interval=60,
        first=datetime.now(tz) + timedelta(seconds=10),
        chat_id=chat_id,
        name="lesson_checker"
    )


async def post_init(application):
    await application.bot.set_my_commands([
        ("start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        ("tato", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ–º"),
        ("urok", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤")
    ])
    setup_jobs(application.job_queue, chat_id=1485636207)


if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tato", tato))
    app.add_handler(CommandHandler("urok", urok))
    app.run_polling(drop_pending_updates=True)
